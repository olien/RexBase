// basecondition ~ less-framework ~ v3.2.1
// copyright 2014 ~ Joachim Doerr ~ hello@basecondition.com
// licensed under MIT or GPLv3 ~ git.io/OJYZgw

// ----------------------------------------------------- ~ transform
// http://www.css3-generator.de/transform.html
// #transform > .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");
// #transform > .origin(~"20% top");
// #transform > .translate(20px, 10px);
// #transform > .translateX(20px);
// #transform > .translateY(20px);
// #transform > .translate3d(20px, 10px, 30px);
// #transform > .scale(0.5, 0.8);
// #transform > .scaleX(0.5);
// #transform > .scaleY(0.5);
// #transform > .skew(35deg, 0deg);
// #transform > .skewX(35deg);
// #transform > .skewY(35deg);
// #transform > .rotate(35deg);
// #transform > .rotate3d(35deg, 15deg, 10deg);
// #transform > .style(preserve-3d);
// .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");

// @namespace: #transform

#transform {
    
    // @methode: .transform
    // @usage: #transform > .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");
    
    .transform(@var-transform, @var-ms: false) {
        .recursion(@var-transform, @var-ms-transform) when (@var-ms-transform = false) and (isstring(@var-transform)) {
            -webkit-transform: @var-transform;
               -moz-transform: @var-transform;
                -ms-transform: @var-transform;
                 -o-transform: @var-transform;
                    transform: @var-transform;
        }
        .recursion(@var-transform, @var-ms-transform) when not (@var-ms-transform = false) and (isstring(@var-transform)) {
            -webkit-transform: @var-transform;
               -moz-transform: @var-transform;
                -ms-transform: @var-ms-transform;
                 -o-transform: @var-transform;
                    transform: @var-transform;
        }
        .recursion(@var-transform, @var-ms-transform);
    }
    
    // @methode: .origin
    // @usage: #transform > .origin(~"20% top");
    
    .origin(@var-origin) {
        .recursion(@var-origin) when (isstring(@var-origin)) {
            -webkit-transform-origin: @var-origin;
               -moz-transform-origin: @var-origin;
                -ms-transform-origin: @var-origin;
                 -o-transform-origin: @var-origin;
                    transform-origin: @var-origin;
        }
        .recursion(@var-origin);
    }
    
    // @methode: .translate
    // @usage: #transform > .translate(20px, 10px);
    
    .translate(@var-x, @var-y: false) {
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (isnumber(@var-y)) {
            @var-translate: translate(@var-x, @var-y);
            #transform > .transform(@var-translate);
        }
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (@var-y = false) {
            @var-translate: translate(@var-x);
            #transform > .transform(@var-translate);
        }
        .recursion(@var-x, @var-y);
    }
    
    // @methode: .translateX
    // @usage: #transform > .translateX(20px);
    
    .translateX(@var-x) {
        .recursion(@var-x) when (isnumber(@var-x)) {
            @var-translateX: translateX(@var-x);
            #transform > .transform(@var-translateX);
        }
        .recursion(@var-x);
    }
    
    // @methode: .translateY
    // @usage: #transform > .translateY(20px);
    
    .translateY(@var-y) {
        .recursion(@var-y) when (isnumber(@var-y)) {
            @var-translateY: translateY(@var-y);
            #transform > .transform(@var-translateY);
        }
        .recursion(@var-y);
    }
    
    // @methode: .translate3d
    // @usage: #transform > .translate3d(20px, 10px, 30px);
    
    .translate3d(@var-x, @var-y: 0, @var-z: 0) {
        .recursion(@var-x, @var-y, @var-z)) when (isnumber(@var-x)) and (isnumber(@var-y)) and (isnumber(@var-z)) {
            @var-translate3d: translate3d(@var-x, @var-y, @var-z);
            #transform > .transform(@var-translate3d);
        }
        .recursion(@var-x, @var-y, @var-z);
    }
    
    // @methode: .scale
    // @usage: #transform > .scale(0.5);
    
    .scale(@var-x, @var-y: false) {
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (isnumber(@var-y)) {
            @var-scale: scale(@var-x, @var-y);
            #transform > .transform(@var-scale);
        }
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (@var-y = false) {
            @var-scale: scale(@var-x);
            #transform > .transform(@var-scale);
        }
        .recursion(@var-x, @var-y);
    }
    
    // @methode: .scaleX
    // @usage: #transform > .scaleX(0.5);
    
    .scaleX(@var-scale) {
        .recursion(@var-scale) when (isnumber(@var-scale)) {
            @var-scaleX: scaleX(@var-scale);
            #transform > .transform(@var-scaleX);
        }
        .recursion(@var-scale);
    }
    
    // @methode: .scaleY
    // @usage: #transform > .scaleY(0.5);
    
    .scaleY(@var-scale) {
        .recursion(@var-scale) when (isnumber(@var-scale)) {
            @var-scaleY: scaleY(@var-scale);
            #transform > .transform(@var-scaleY);
        }
        .recursion(@var-scale);
    }
    
    // @methode: .skew
    // @usage: #transform > .skew(35deg, 0deg);
    
    .skew(@var-x, @var-y: false) {
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (isnumber(@var-y)) {
            @var-webkit: skew(@var-x, @var-y);
            @var-ms: skewX(@var-x) skewY(@var-y);
            #transform > .transform(@var-webkit, @var-ms);
        }
        .recursion(@var-x, @var-y) when (isnumber(@var-x)) and (@var-y = false) {
            @var-webkit: skew(@var-x);
            @var-ms: skewX(@var-x) skewY(@var-x);
            #transform > .transform(@var-webkit, @var-ms);
        }
        .recursion(@var-x, @var-y);
    }
    
    // @methode: .skewX
    // @usage: #transform > .skewX(35deg);
    
    .skewX(@var-deg) {
        .recursion(@var-deg) when (isnumber(@var-deg)) {
            @var-skewX: skewX(@var-deg);
            #transform > .transform(@var-skewX);
        }
        .recursion(@var-deg);
    }
    
    // @methode: .skewY
    // @usage: #transform > .skewY(35deg);
    
    .skewY(@var-deg) {
        .recursion(@var-deg) when (isnumber(@var-deg)) {
            @var-skewY: skewY(@var-deg);
            #transform > .transform(@var-skewY);
        }
        .recursion(@var-deg);
    }
    
    // @methode: .rotate
    // @usage: #transform > .rotate(35deg);
    
    .rotate(@var-deg) {
        .recursion(@var-deg) when (isnumber(@var-deg)) {
            @var-rotate: rotate(@var-deg);
            #transform > .transform(@var-rotate);
        }
        .recursion(@var-deg);
    }
    
    // @methode: .rotate3d
    // @usage: #transform > .rotate3d(35deg, 15deg, 10deg);
    
    .rotate3d(@var-x, @var-y: 0, @var-z: 0) {
        .recursion(@var-x, @var-y, @var-z)) when (isnumber(@var-x)) and (isnumber(@var-y)) and (isnumber(@var-z)) {
            @var-rotate: rotateX(@var-x) rotateY(@var-y) rotateZ(@var-z);
            #transform > .transform(@var-rotate);
            #transform > .style(preserve-3d);
        }
        .recursion(@var-x, @var-y, @var-z);
    }
    
    // @methode: .style
    // @usage: #transform > .style(preserve-3d);
    
    .style(@var-style) {
        .recursion(@var-style) when (iskeyword(@var-style)) {
            -webkit-transform-style: @var-style;
               -moz-transform-style: @var-style;
                -ms-transform-style: @var-style;
                 -o-transform-style: @var-style;
                    transform-style: @var-style;
        }
        .recursion(@var-style);
    }
}

// @direct-methode: .transform
// @usage: .transform(~"scale(1) rotate(360deg) translate(20px, 0px) skew(320deg, 0deg)");

.transform(@var-webkit, @var-ms: false) {
    #transform > .transform(@var-webkit, @var-ms);
}
