// basecondition ~ less-framework ~ v3.2.1
// copyright 2014 ~ Joachim Doerr ~ hello@basecondition.com
// licensed under MIT or GPLv3 ~ git.io/OJYZgw

// ----------------------------------------------------- ~ transition
// #transition > .transition(~"background-color 150ms ease-in-out, border 150ms ease-in-out");
// #transition > .transform(~"150ms ease-in-out, border 150ms ease-in-out");
// #transition > .set(all, 2s, linear);
// #transition > .delay(40ms);
// #transition > .duration(15ms);
// .transition(~"background-color 150ms ease-in-out, border 150ms ease-in-out");

// @namespace: #transition

#transition {
    
    // @methode: .transition
    // @usage: #transition > .transition(~"background-color 150ms ease-in-out, border 150ms ease-in-out");
    // @usage: #transition > .transition(~"150ms ease-in-out, background 150ms ease-in-out, border 150ms ease-in-out", transform);
    
    .transition(@var-transition, @var-type: false) {
        .recursion(@var-transition, @var-type) when (@var-type = transform) and (isstring(@var-transition)) {
            -webkit-transition: -webkit-transform @var-transition;
               -moz-transition: -moz-transform @var-transition;
                -ms-transition: -ms-transform @var-transition;
                 -o-transition: -o-transform @var-transition;
                    transition: transform @var-transition;
        }
        .recursion(@var-transition, @var-type) when not (@var-type = transform) and (isstring(@var-transition)) {
            -webkit-transition: @var-transition;
               -moz-transition: @var-transition;
                -ms-transition: @var-transition;
                 -o-transition: @var-transition;
                    transition: @var-transition;
        }
        .recursion(@var-transition, @var-type);
    }
    
    // @methode: .transform
    // @usage: #transition > .transform(~"150ms ease-in-out, border 150ms ease-in-out");
    
    .transform(@var-transform) {
        #transition > .transition(@var-transform, transform);
    }
    
    // @methode: .property
    // @usage: #transition > .property(width);
    
    .property(@var-property) {
        .recursion(@var-property) when (iskeyword(@var-property)) {
            -webkit-transition-property: @var-property;
               -moz-transition-property: @var-property;
                 -o-transition-property: @var-property;
                    transition-property: @var-property;
        }
        .recursion(@var-property);
    }
    
    // @methode: .timing-function
    // @usage: #transition > .timing-function(linear);
    
    .timing-function(@var-timing-function) {
        .recursion(@var-timing-function) when (iskeyword(@var-timing-function)) {
            -webkit-transition-timing-function: @var-timing-function;
               -moz-transition-timing-function: @var-timing-function;
                 -o-transition-timing-function: @var-timing-function;
                    transition-timing-function: @var-timing-function;
        }
        .recursion(@var-timing-function);
    }
    
    // @methode: .delay
    // @usage: #transition > .delay(40ms);
    
    .delay(@var-delay) {
        .recursion(@var-delay) when (isnumber(@var-delay)) {
        -webkit-transition-delay: @var-delay;
           -moz-transition-delay: @var-delay;
             -o-transition-delay: @var-delay;
                transition-delay: @var-delay;
        }
        .recursion(@var-delay);
    }
    
    // @methode: .duration
    // @usage: #transition > .duration(15ms);
    
    .duration(@var-duration) {
        .recursion(@var-duration) when (isnumber(@var-duration)) {
            -webkit-transition-duration: @var-duration;
               -moz-transition-duration: @var-duration;
                 -o-transition-duration: @var-duration;
                    transition-duration: @var-duration;
        }
        .recursion(@var-duration);
    }
    
    // @methode: .set
    // @usage: #transition > .set(all, 2s, linear);
    
    .set(@var-prop: all, @var-time: 1s, @var-ease: linear) {
        .recursion(@var-prop, @var-time, @var-ease) when (@var-prop = transform) {
            @var-set: ~"@{var-time} @{var-ease}";
            #transition > .transition(@var-set, @var-prop);
        }
        .recursion(@var-prop, @var-time, @var-ease) when not (@var-prop = transform) {
            @var-set: ~"@{var-prop} @{var-time} @{var-ease}";
            #transition > .transition(@var-set);
        }
        .recursion(@var-prop, @var-time, @var-ease);
    }
}

// @direct-methode: .transition
// @usage: .transition(~"background-color 150ms ease-in-out, border 150ms ease-in-out");

.transition(@var-transition, @type: false) {
    #transition > .transition(@var-transition, @type);
}
